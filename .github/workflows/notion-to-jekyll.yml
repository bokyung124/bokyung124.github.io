name: Sync Notion and Deploy

on:
  workflow_dispatch:
  schedule:
    - cron: '*/10 * * * *'
  push:
    branches:
      - main

# Allow one concurrent deployment
concurrency:
  group: "pages"
  cancel-in-progress: true

jobs:
  sync-notion:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      changes_pushed: ${{ steps.git.outputs.changes_pushed }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: 3.11

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run Notion to Jekyll script
        id: sync
        env:
          NOTION_API_KEY: ${{ secrets.NOTION_API_KEY }}
          NOTION_TOKEN: ${{ secrets.NOTION_API_KEY }} # notion2md를 위해 추가
          DATABASE_ID: ${{ secrets.DATABASE_ID }}
        run: python _scripts/sync_notion.py

      - name: Commit and push changes
        id: git
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          git add .
          if git status --porcelain | grep -qE "."; then
            git commit -m "chore: Sync posts and images with Notion"
            git push
            echo "changes_pushed=true" >> $GITHUB_OUTPUT
          else
            echo "No changes to commit."
            echo "changes_pushed=false" >> $GITHUB_OUTPUT
          fi

  build:
    runs-on: ubuntu-latest
    needs: sync-notion
    if: github.event_name != 'schedule' || needs.sync-notion.outputs.changes_pushed == 'true'
    permissions:
      contents: read
      pages: write
      id-token: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: true

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.3
          bundler-cache: true

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          # 현재 디렉토리와 파일 확인
          echo "현재 디렉토리: $(pwd)"
          echo "package.json 존재 여부: $(ls -la package.json 2>/dev/null && echo 'YES' || echo 'NO')"
          echo "package-lock.json 존재 여부: $(ls -la package-lock.json 2>/dev/null && echo 'YES' || echo 'NO')"
          
          # npm 설정 최적화
          npm config set fetch-retry-mintimeout 20000
          npm config set fetch-retry-maxtimeout 120000
          npm config set fetch-retries 3
          
          # package-lock.json이 있으면 npm ci, 없으면 npm install 사용
          if [ -f "package-lock.json" ]; then
            echo "package-lock.json 발견, npm ci 사용"
            INSTALL_CMD="npm ci"
          else
            echo "package-lock.json 없음, npm install 사용"
            INSTALL_CMD="npm install"
          fi
          
          # 재시도 로직으로 npm install 실행
          for i in {1..3}; do
            echo "npm install 시도 $i/3"
            if $INSTALL_CMD --no-audit --no-fund; then
              echo "npm install 성공"
              break
            else
              echo "npm install 실패, 재시도 중..."
              if [ $i -eq 3 ]; then
                echo "모든 재시도 실패, 대체 레지스트리 사용"
                npm config set registry https://registry.npmmirror.com/
                $INSTALL_CMD --no-audit --no-fund
              fi
              sleep 5
            fi
          done

      - name: Build JavaScript
        run: |
          npm run build:js

      - name: Build CSS
        run: |
          npm run build:css

      - name: Build site
        run: |
          bundle install
          bundle exec jekyll b -d "_site${{ steps.pages.outputs.base_path }}"
        env:
          JEKYLL_ENV: "production"

      - name: Test site
        run: |
          bundle exec htmlproofer _site \
          --disable-external \
          --ignore-urls "/^http:\/\/127.0.0.1/,/^http:\/\/0.0.0.0/,/^http:\/\/localhost/"

      - name: Upload site artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: "_site${{ steps.pages.outputs.base_path }}"

  deploy:
    needs: build
    permissions:
      pages: write
      id-token: write
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4